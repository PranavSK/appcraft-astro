---
import type { GetStaticPaths } from 'astro'

import { MarkdocRenderer } from '@/components/markdoc/renderer'
import { markdocConfigs } from '@/content/config'
import RootLayout from '@/layouts/root.astro'
import Markdoc from '@markdoc/markdoc'
import { getCollection } from 'astro:content'

export const getStaticPaths = (async () => {
  const collection = await getCollection('slide')
  return collection.map((slide) => ({
    params: {
      slug: slide.slug
    },
    props: {
      slide
    }
  }))
}) satisfies GetStaticPaths

const { slide } = Astro.props
const ast = Markdoc.parse(slide.body)
const nodes = Markdoc.transform(ast, markdocConfigs[slide.collection])
---

<RootLayout class='relative'>
  <MarkdocRenderer client:idle nodes={nodes} />
</RootLayout>

<!-- <script>
  import EmblaCarousel from 'embla-carousel'
  const viewport = document.querySelector<HTMLElement>('#slide-viewport')

  if (viewport) {
    const emblaApli = EmblaCarousel(viewport)
    document.addEventListener(
      'keydown',
      (e) => {
        if (e.key === 'ArrowRight') {
          emblaApli.scrollNext()
        }
        if (e.key === 'ArrowLeft') {
          emblaApli.scrollPrev()
        }
      },
      true
    )

    // Get headings from data attribute
    const headings = JSON.parse(
      viewport.dataset.headings ?? '[]'
    ) as Array<string>

    const slides = emblaApli.slideNodes()

    // Map slides to the containing headings
    const headingsMap = slides.map((slide) => {
      const containingHeadings = headings.filter((h) =>
        slide.querySelector(`#${h}`)
      )
      return containingHeadings
    })

    // Disable anchor tags default behaviour and allow embla to handle these
    slides.forEach((slideNode) => {
      const anchors = slideNode.querySelectorAll('a')
      anchors.forEach((anchor) => {
        const heading = new URL(anchor.href).hash.replace('#', '')
        const headingIndex = headingsMap.findIndex((slideHeadings) =>
          slideHeadings.includes(heading)
        )

        if (headingIndex > -1) {
          anchor.addEventListener('click', (e) => {
            e.preventDefault()
            emblaApli.scrollTo(headingIndex)
          })
        }
      })
    })

    const nextButton = document.querySelector<HTMLButtonElement>('#slide-next')
    if (nextButton) {
      nextButton.addEventListener('click', () => emblaApli.scrollNext())
    }
    const prevButton = document.querySelector<HTMLButtonElement>('#slide-prev')
    if (prevButton) {
      prevButton.addEventListener('click', () => emblaApli.scrollPrev())
    }
  }
</script> -->
